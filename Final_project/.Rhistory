}
novel_plot(predict, go_ny_true)
library(ggplot2)
novel_plot <- function(predict, true){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = "go_ny") +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(predict, go_ny_true)
library(NMF)
go_ny_nmf <- nmf(x=M,rank=10, nrun = 1)
View(go_ny_nmf)
View(go_ny_nmf)
nmf_p <- function(W, H){
dat <- W%*%H
dat <- dat / rowSums(dat)
return(dat)
}
go_ny_nmf_p <- nmf_p(go_ny_nmf@fit@W, go_ny_nmf@fit@H)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
return(dat)
}
go_ny_predict <- compute_p(go_ny_train_sh,P)
predict <- data.table("user" = c(1:500), "predict" = predict)
View(predict)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
return(dat)
}
go_ny_predict <- compute_p(go_ny_train_sh,P)
predict <- data.table("user" = c(1:500), "predict" = go_ny_predict)
library(ggplot2)
novel_plot <- function(predict, true){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = "go_ny") +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(predict, go_ny_true)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(dat)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(predict)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
View(go_ny_predict_mm)
library(ggplot2)
novel_plot <- function(predict, true){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = "go_ny") +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true)
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = "go_ny"+name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true)
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = "go_ny"+name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "mm")
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "go_ny_mm")
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(predict)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
go_ny_predict_nmf <- compute_p(go_ny_train_sh,go_ny_nmf_p)
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
# novel_plot(go_ny_predict_mm, go_ny_true, "go_ny_mm")
novel_plot(go_ny_predict_nmf, go_ny_true, "go_ny_nmf")
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "go_ny_mm")
novel_plot(go_ny_predict_nmf, go_ny_true, "go_ny_nmf")
library(ggplot2)
novel_plot <- function(predict, true, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = "Mixture Model", main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "go_ny_mm")
novel_plot(go_ny_predict_nmf, go_ny_true, "go_ny_nmf_10")
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture Model", "go_ny_mm")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF 10", "go_ny_nmf")
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny_mm")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF 10", "go_ny_nmf")
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF 10", "go_ny")
library(NMF)
go_ny_nmf <- nmf(x=M, rank=50, nrun = 1)
library(NMF)
go_ny_nmf <- nmf(x=M, rank=30, nrun = 1)
nmf_p <- function(W, H){
dat <- W%*%H
dat <- dat / rowSums(dat)
return(dat)
}
go_ny_nmf_p <- nmf_p(go_ny_nmf@fit@W, go_ny_nmf@fit@H)
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF 30", "go_ny")
View(go_ny_nmf)
View(go_ny_nmf)
View(go_ny_nmf)
nmf_p <- function(W, H){
dat <- W%*%H
dat <- dat / rowSums(dat)
return(dat)
}
go_ny_nmf_p <- nmf_p(go_ny_nmf@fit@W, go_ny_nmf@fit@H)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(predict)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
go_ny_predict_nmf <- compute_p(go_ny_train_sh,go_ny_nmf_p)
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF 30", "go_ny")
library(NMF)
go_ny_nmf <- nmf(x=M, rank=10, method = "nsNMF", nrun = 1)
nmf_p <- function(W, H){
dat <- W%*%H
dat <- dat / rowSums(dat)
return(dat)
}
go_ny_nmf_p <- nmf_p(go_ny_nmf@fit@W, go_ny_nmf@fit@H)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(predict)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
go_ny_predict_nmf <- compute_p(go_ny_train_sh,go_ny_nmf_p)
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF(nsNMF) 10", "go_ny")
library(NMF)
go_ny_nmf <- nmf(x=M, rank=20, method = "nsNMF", nrun = 1)
nmf_p <- function(W, H){
dat <- W%*%H
dat <- dat / rowSums(dat)
return(dat)
}
go_ny_nmf_p <- nmf_p(go_ny_nmf@fit@W, go_ny_nmf@fit@H)
compute_p <- function(train, P){
for(u in 1:length(train$V1)){
P[as.numeric(train[u,"V1"])+1, as.numeric(train[u,"V2"])+1] <- 0
}
dat <- rowSums(P)
n <- nrow(P)
predict <- data.table("user" = c(1:n), "predict" = dat)
return(predict)
}
go_ny_predict_mm <- compute_p(go_ny_train_sh,P)
go_ny_predict_nmf <- compute_p(go_ny_train_sh,go_ny_nmf_p)
library(ggplot2)
novel_plot <- function(predict, true, ylabel, name){
novel <- merge(x = predict, y = true, by = "user", all.x = TRUE)
novel[is.na(true), "true"] <- 0
novel <- novel[, ':='(color, "above")]
below <- 0
rmse <- 0
for(i in 1:length(novel$user)){
rmse <- rmse + (as.numeric(novel[i, "predict"] - novel[i, "true"]))^2
if(novel[i, "predict"] < novel[i, "true"]){
below <- below + 1
novel[i, "color"] <- "below"
}
}
above <- length(novel$user) - below
rmse <- sqrt(rmse/length(novel$user))
qplot(x = true, y = predict, data = novel, color = color, xlim = c(-0.2,1.2), ylim = c(-0.2,1.2), xlab = "True", ylab = ylabel, main = name) +
geom_abline(linetype = "dashed") +
annotate("text", x = 1, y = -0.05, label = sprintf("Above: %d",above), size = 3) +
annotate("text", x = 1, y = -0.1, label = sprintf("Below: %d",below), size = 3) +
annotate("text", x = 1, y = -0.15, label = sprintf("rmse: %.4f",rmse), size = 3)
}
novel_plot(go_ny_predict_mm, go_ny_true, "Mixture", "go_ny")
novel_plot(go_ny_predict_nmf, go_ny_true, "NMF(nsNMF) 10", "go_ny")
View(go_ny_nmf_p)
View(go_ny_nmf)
View(go_ny_nmf)
